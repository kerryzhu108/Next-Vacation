generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Status {
  PAID
  UNPAID
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  intentId String? @db.ObjectId
  name String?
  email String @unique // acts as username, named "email" for OAuth adaptor
  emailVerified DateTime?
  image String?
  hashedPassword String?
  trials Int @default(1)
  limit Int @default(2)
  status Status @default(UNPAID)

  account Account[]
  recommendations Recommendation[]
  preferences Preferences[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String?  @db.String
  access_token String?  @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String?  @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Recommendation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  groupId  String
  location String
  description String
  imageUrl String
  favorite Boolean @default(false)

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preferences{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  answers String[]
  
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}